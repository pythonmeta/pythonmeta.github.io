[{"id":0,"href":"/docs/object/eyeryting-is-an-object/","title":"一切皆对象","section":"Python对象","content":"转载或者引用本文内容请注明来源。   Python is a clear and powerful object-oriented programming language, comparable to Perl, Ruby, Scheme, or Java. [1]\n 从官方对Python的介绍中可知，Python是一门可与Perl、Ruby、Scheme、Java等相媲美的面向对象的编程语言。可见，Python从设计之初就是一门面向对象的语言。而且，相较于Java等面向对象的编程语言，Python的面向对象的思想贯彻地更彻底。\n对象的三个特性 #  在Python中，所有对象都拥有以下三个特性：\n  唯一身份（unique identity）\n每个对象都有一个唯一的身份标识自己，在对象创建后就不可被修改。在CPython中，使用对象的内存地址作为对象的唯一身份。\n我们可以通过Python内置函数id()来获取对象的身份ID。\n\u0026gt;\u0026gt;\u0026gt; n = 10\r\u0026gt;\u0026gt;\u0026gt; id(n)\r3007271168592\r  类型（type）\n对象的类型决定了对象拥有的属性和方法，可以进行的操作等。同样的，对象的类型也是不可更改的。\n我们可以通过Python内置函数type()来获取对象的类型。\n\u0026gt;\u0026gt;\u0026gt; n = 10\r\u0026gt;\u0026gt;\u0026gt; type(10)\r\u0026lt;class 'int'\u0026gt;\r  值（value）\n对象的值是对象所表示的数据或内容。\n对象的类型决定了对象的值是否可被修改。值可被修改的对象，称为可变对象（mutable），值不可被修改的对象，称为不可变对象（immutable）。\n  对象的名称 #  在Python中，对象的名称有一定的特殊性，它不属于对象的特征，而对象本身也不知道它自己叫什么名字。\n理解对象名称需要我们把握好以下几个要点：\n  名称不是对象的固有特征，一个对象可以有任意多个名称，也可以没有名称。\n  Python的命名空间（namespace）管理着对象名称和对象的映射关系。\n命名空间可理解为一个字典，其中字典的键是对象的名称（变量名），而字典的值是对象本身。这样，通过对象的名称（变量名）就可以索引对象本身了。\n  赋值语句修改的是命名空间中对象名称（变量名）和对象本身的映射关系，而不是修改对象本身。\n  一切皆对象 #   One of my goals for Python was to make it so that all objects were “first class.” By this, I meant that I wanted all objects that could be named in the language (e.g., integers, strings, functions, classes, modules, methods, etc.) to have equal status. That is, they can be assigned to variables, placed in lists, stored in dictionaries, passed as arguments, and so forth. [2]\nGuido van Rossum\n 在Python中，一切皆对象。正如Python之父Guido van Rossum所解释的，在Python中，整数、字符串、函数、类、模块、方法等通通都是对象，具有同等的地位。也就是说，可以将它们分配给变量、放置在列表中、存储在字典中、作为参数传递等等。\n我们可以从前两节的内容来说明一切皆对象的内涵：\n  无论是内置类型、函数、类等都是对象，拥有对象的三个特性。\n  对象名称（变量名）只是对象的索引，赋值操作修改的是对象名称（变量名）和对象的映射关系。因此，这就允许我们把对象赋值给任意变量名、当作参数传递、从函数中返回对象等。\n  理解好Python对象的三个特性，以及对象名称和对象的关系，就比较容易理解Python中一切皆对象的含义了。\n[1] https://wiki.python.org/moin/BeginnersGuide/Overview\n[2] http://python-history.blogspot.com/2009/02/first-class-everything.html\n"},{"id":1,"href":"/docs/object/im-mutable-object/","title":"不可变对象 vs 可变对象","section":"Python对象","content":"转载或者引用本文内容请注明来源。  在《一切皆对象》一章中，我们知道对象拥有唯一身份（identity）、类型（type）和值（value）三个特性，其中对象的身份和类型是不可被修改的，而对象的类型决定了对象的值是否可被修改。\n我们按照对象的值是否可被修改，可以将对象分为不可变对象（immutable）和可变对象（mutable）。\n不可变对象（immutable） #  值不可被修改的对象，称为不可变对象（immutable）。\n比如int, float, bool, string, tuple等内置类型就是不可变对象。任何修改不可变对象值的尝试，都会抛出异常（\u0026lsquo;xxx\u0026rsquo; object does not support item assignment）。\n\u0026gt;\u0026gt;\u0026gt; warn = 'Immutable object can’t be changed.' \u0026gt;\u0026gt;\u0026gt; warn[0] = 'W' Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: 'str' object does not support item assignment 可变对象（mutable） #  值可被修改的对象，称为可变对象（mutable）。\n比如list, dict, set等内置类型就是可变对象。\n\u0026gt;\u0026gt;\u0026gt; students = ['Tom', 'Jerry', 'Jacob'] \u0026gt;\u0026gt;\u0026gt; students[0] = 'Mia' \u0026gt;\u0026gt;\u0026gt; students ['Mia', 'Jerry', 'Jacob'] 编程建议 #   优先使用不可变对象，在需要改变变量的场景时才使用可变对象。 作为函数参数时，建议使用不可变对象。  "}]